{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\82107\\\\Desktop\\\\Learn-Java-Spring\\\\01-frontend\\\\todo-app\\\\src\\\\components\\\\todo\\\\security\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { executeBasicAuthenticationService } from \"../api/HelloWorldApiService\";\n\n//1: Create a Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n//2: Share the created context with other components\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider({\n  children\n}) {\n  _s2();\n  //3: Put some state in the context\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [username, setUsername] = useState(null);\n\n  // function login(username, password) {\n  //     if (username === 'in28minutes' && password === 'dummy') {\n  //         setAuthenticated(true)\n  //         setUsername(username)\n  //         return true\n  //     } else {\n  //         setAuthenticated(false)\n  //         setUsername(null)\n  //         return false\n  //     }\n  // }\n\n  async function login(username, password) {\n    const baToken = 'Basic ' + window.btoa(username + \":\" + password);\n    try {\n      const response = await executeBasicAuthenticationService(baToken);\n      if (response.status == 200) {\n        setAuthenticated(true);\n        setUsername(username);\n        return true;\n      } else {\n        setAuthenticated(false);\n        setUsername(null);\n        return false;\n      }\n    } catch (error) {\n      setAuthenticated(false);\n      setUsername(null);\n      return false;\n    }\n  }\n  function logout() {\n    setAuthenticated(false);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"r+hfkL8+aON1x8Go1nUIN28kT5E=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","executeBasicAuthenticationService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setAuthenticated","username","setUsername","login","password","baToken","window","btoa","response","status","error","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/82107/Desktop/Learn-Java-Spring/01-frontend/todo-app/src/components/todo/security/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\nimport { executeBasicAuthenticationService } from \"../api/HelloWorldApiService\";\r\n\r\n//1: Create a Context\r\nexport const AuthContext = createContext()\r\n\r\nexport const useAuth = () => useContext(AuthContext)\r\n\r\n//2: Share the created context with other components\r\nexport default function AuthProvider({ children }) {\r\n\r\n    //3: Put some state in the context\r\n    const [isAuthenticated, setAuthenticated] = useState(false)\r\n\r\n    const [username, setUsername] = useState(null)\r\n\r\n    // function login(username, password) {\r\n    //     if (username === 'in28minutes' && password === 'dummy') {\r\n    //         setAuthenticated(true)\r\n    //         setUsername(username)\r\n    //         return true\r\n    //     } else {\r\n    //         setAuthenticated(false)\r\n    //         setUsername(null)\r\n    //         return false\r\n    //     }\r\n    // }\r\n\r\n    async function login(username, password) {\r\n\r\n        const baToken = 'Basic ' + window.btoa(username + \":\" + password)\r\n\r\n        try {\r\n\r\n            const response = await executeBasicAuthenticationService(baToken)\r\n\r\n            if (response.status == 200) {\r\n                setAuthenticated(true)\r\n                setUsername(username)\r\n                return true\r\n            } else {\r\n                setAuthenticated(false)\r\n                setUsername(null)\r\n                return false\r\n            }\r\n        } catch(error) {\r\n            setAuthenticated(false)\r\n            setUsername(null)\r\n            return false\r\n        }\r\n    }\r\n\r\n    function logout() {\r\n        setAuthenticated(false)\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isAuthenticated, login, logout, username }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,iCAAiC,QAAQ,6BAA6B;;AAE/E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,eAAe,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAE/C;EACA,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,eAAec,KAAKA,CAACF,QAAQ,EAAEG,QAAQ,EAAE;IAErC,MAAMC,OAAO,GAAG,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACN,QAAQ,GAAG,GAAG,GAAGG,QAAQ,CAAC;IAEjE,IAAI;MAEA,MAAMI,QAAQ,GAAG,MAAMlB,iCAAiC,CAACe,OAAO,CAAC;MAEjE,IAAIG,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;QACxBT,gBAAgB,CAAC,IAAI,CAAC;QACtBE,WAAW,CAACD,QAAQ,CAAC;QACrB,OAAO,IAAI;MACf,CAAC,MAAM;QACHD,gBAAgB,CAAC,KAAK,CAAC;QACvBE,WAAW,CAAC,IAAI,CAAC;QACjB,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAMQ,KAAK,EAAE;MACXV,gBAAgB,CAAC,KAAK,CAAC;MACvBE,WAAW,CAAC,IAAI,CAAC;MACjB,OAAO,KAAK;IAChB;EACJ;EAEA,SAASS,MAAMA,CAAA,EAAG;IACdX,gBAAgB,CAAC,KAAK,CAAC;EAC3B;EAEA,oBACIR,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEd,eAAe;MAAEI,KAAK;MAAEQ,MAAM;MAAEV;IAAS,CAAE;IAAAJ,QAAA,EACrEA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAACnB,GAAA,CApDuBF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}